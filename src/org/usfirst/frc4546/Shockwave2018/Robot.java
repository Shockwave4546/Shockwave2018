  // RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// 2/8 GFB, HPD - added a few limit switches and worked on potentiometer values

package org.usfirst.frc4546.Shockwave2018;


import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.AccumulatorResult;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.interfaces.Potentiometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

	private static final int kMotorPort3 = 3;
	private SpeedController speedController3;
	private static final int kMotorPort6 = 6;
	private SpeedController speedController6;
	
    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    
    private static final int kPDP = 0;
    private PowerDistributionPanel m_PDP;
    
    private static final int kMotorPort1 = 1;//Motor Controller 4
	private SpeedController FrontLeft;
	private double FrontLeftPos = .5;
	private double FrontLeftNeg = .5;
	
	private static final int kMotorPort3 = 3;//Motor Controller 6
	private SpeedController FrontRight;
	private double  FrontRightPos = .5;
	private double  FrontRightNeg = .5;
	
	private static final int kMotorPort4= 4;//Motor Controller 2
	private SpeedController BackLeft;
	private double  BackLeftPos = .5;
	private double  BackLeftNeg = .5;
	
	private static final int kMotorPort5 = 5;//Motor Controller 3
	private SpeedController BackRight;
	private double  BackRightPos = .5;
	private double  BackRightNeg = .5;
	
	private static final int kIntakePort2 = 2; //Motor Controller 10
	private SpeedController IntakeLeft;
	private double  IntakeLeftPos = .5;
	private double  IntakeLeftNeg = .5;
	
	private static final int kIntakePort7 = 7; //Motor Controller 7
	private SpeedController IntakeRight;
	private double  IntakeRightPos = .5;
	private double  IntakeRightNeg = .5;
	
	private static final int kArmPort6 = 6;//Motor Controller 3
	private SpeedController ArmMotor;
	private double  ArmPos = .5;
	private double  ArmNeg = .5;
	
	private static final int kSlidePort8 = 8;//Motor Controller 1
	private SpeedController SlideMotor;
	private double  SlidePos = .5;
	private double  SlideNeg = .5;
	
	//private static final int kMotorPort9 = 9;
	//private SpeedController speedController9;


    private AnalogInput ai; {
    	ai = new AnalogInput(0);
    	}
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

       
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
   
        
       
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
     

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

      

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    	
    	m_PDP = new PowerDistributionPanel(kPDP);
    	SmartDashboard.putData("Voltage/Current", m_PDP);
    	SmartDashboard.putNumber("Power", m_PDP.getTotalPower());
    	SmartDashboard.putNumber("Total", m_PDP.getTotalPower() * Timer.getMatchTime());
    	
    	FrontLeft = new VictorSP(kMotorPort1);
    	FrontLeft.setInverted(false);
    	
    	FrontRight = new VictorSP(kMotorPort3);
    	FrontRight.setInverted(false);
    	
    	BackLeft = new VictorSP(kMotorPort4);
    	BackLeft.setInverted(false);
    	
    	BackRight = new VictorSP(kMotorPort5);
    	BackRight.setInverted(false);
    	
    	IntakeLeft = new VictorSP(kIntakePort2);//Victor SPX
    	IntakeLeft.setInverted(false);
    	
    	IntakeRight = new VictorSP(kIntakePort7);//Victor SPX
    	IntakeRight.setInverted(false);
    	
     	ArmMotor = new VictorSP(kArmPort6);
     	ArmMotor.setInverted(false);
     	
    	SlideMotor = new VictorSP(kSlidePort8);
    	SlideMotor.setInverted(false);
    	
    	//speedController9 = new VictorSP(kMotorPort9);
        

        SmartDashboard.putData("Auto mode", chooser);
        new Thread(() -> {
            UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
            camera.setResolution(640, 480);
            
            CvSink cvSink = CameraServer.getInstance().getVideo();
            CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640, 480);
            
            Mat source = new Mat();
            Mat output = new Mat();
            
            while(!Thread.interrupted()) {
                cvSink.grabFrame(source);
                Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
                outputStream.putFrame(output);
            }
        }).start();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        if (autonomousCommand != null) autonomousCommand.cancel();
    
       
        
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
		if(ai.getValue() > 3500){
			speedController3.set(1);
		}

        
        if(ai.getValue() > 3000 && ai.getValue() < 3450){
			speedController3.set(0.5);

		}
		
		if(ai.getValue() < 2950 && ai.getValue() > 1500){
			speedController3.set(0.1);
		
		}
		if(ai.getValue() < 1000){
			speedController3.set(0);
		
		}
        
    }

    public void ai() {
		AnalogInput exampleAnalog = new AnalogInput(0);
		int bits;
		exampleAnalog.setOversampleBits(4);
		bits = exampleAnalog.getOversampleBits();
		exampleAnalog.setAverageBits(2);
		bits = exampleAnalog.getAverageBits();
		
		//Above details the method of obtaining the Average and OversampleBits
		
		AnalogInput.setGlobalSampleRate(62500);
		
		//Default value of samples per channel per second, causes all channels to sample at same rate
		
		AnalogInput example2Analog = new AnalogInput(0);
		int raw = example2Analog.getValue();
		double volts = example2Analog.getVoltage();
		int averageRaw = example2Analog.getAverageValue();
		double averageVolts = example2Analog.getAverageVoltage();
		
		/*
		 *-example2Analog (and so on) used to prevent errors caused by exampleAnalog
		 *-Raw value for bits without calibration
		 *-Volts value for bits after calibration
		*/
		
		AnalogInput example3Analog = new AnalogInput(0);
		example3Analog.setAccumulatorInitialValue(0);
		example3Analog.setAccumulatorCenter(2048);
		example3Analog.setAccumulatorDeadband(10);
		example3Analog.resetAccumulator();
		
		/*
		 * InitialValue: raw value when reset
		 * Center: raw value subtracted from sample before applied to accumulator
		 * Deadband: around center, treated as 0
		 */
		
		
		AnalogInput example4Analog = new AnalogInput(0);
		long count = example4Analog.getAccumulatorCount();
		long value = example4Analog.getAccumulatorValue();
		AccumulatorResult result = new AccumulatorResult();
		example4Analog.getAccumulatorOutput(result);
		count = result.count;
		value = result.value;
		
		/*
		 * Count: samples added since last reset
		 * Value: current value
		 */
		
		
		if(ai.getValue() > 3000){
			speedController3.set(0.5);

		}
		
		if(ai.getValue() < 2950 && ai.getValue() > 1500){
			speedController3.set(0.1);
		
		}
		if(ai.getValue() > 1000){
			speedController3.set(0);
		
		}
		
		
		SmartDashboard.putNumber("Analog Value", example2Analog.getValue());
		SmartDashboard.putNumber("Analog Voltage", example2Analog.getVoltage());
		
					
	}
	
	/*	Potentiometer pot; {
			pot = new AnalogPotentiometer(0, 360, 30);
			AnalogInput ai = new AnalogInput(1);
			pot = new AnalogPotentiometer(ai, 360, 30);
			Potentiometer pot = new AnalogPotentiometer(0, 360, 30);
			double degrees = pot.get();
		} */

}