// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4546.Shockwave2018;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4546.Shockwave2018.commands.*;
import org.usfirst.frc4546.Shockwave2018.subsystems.*;

import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    public static OI oi;
    public static PDPSub pDPSub;
    public static ControlSub controlSub;
    
    private SpeedController speedController1; //front left motor
    private static final int kMotorPort0 = 0;
    private double speedF1 = .5;
    private double speedR1 = .5;
    
    private SpeedController speedController2; //back left motor
    private static final int kMotorPort1 = 1;
    private double speedF2 = .5;
    private double speedR2 = .5;
    
    private SpeedController speedController3; //front right motor
    private static final int kMotorPort2 = 2;
    private double speedF3 = .5;
    private double speedR3 = .5;
    
    private SpeedController speedController4; //back right motor
    private static final int kMotorPort3 = 3;
    private double speedF4 = .5;
    private double speedR4 = .5;
    
    private SpeedController speedController5; // Intake 1 motor
    private static final int kIntakePort4 = 4;
    private double speedI1 = .5;
    private double speedO1 = .5;
    
    private SpeedController speedController6; //Intake 2 motor
    private static final int kIntakePort5 = 5;
    private double speedI2 = .5;
    private double speedO2 = .5;
    
	private SpeedController speedController7; // arm rotation motor
    private static final int kArmPort6 = 6;
    private double speedAU = .5;
    private double speedAD = .5;
    
    private SpeedController speedController8; //linear slide motor
    private static final int kSlidePort7 = 7;
    private double speedSU = .5;
    private double speedSD = .5;
    
    //private SpeedController speedController9;
    //private static final int kMotorPort8 = 8;
    //private SpeedController speedController10;
    //private static final int kMotorPort9 = 9;
    
    private XboxController Xbox1 = OI.Xbox1;
    private double LeftX1 = 0;
    //private double LeftY1 = 0;
    //private double RightX1 = 0;
    //private double RightY1 = 0;
    private double TriggerR1 = 0;
    private double TriggerL1 = 0;
    
    private XboxController Xbox2 = OI.Xbox2;
    private double LeftX2 = 0;
    //private double LeftY2 = 0;
    private double RightX2 = 0;
    //private double RightY2 = 0;
    private boolean Start2 = false;
    private double TriggerR2 = 0;
    private double TriggerL2 = 0;
    private boolean BumperL2 = false;
    private boolean BumperR2 = false;
    private boolean manualarm = false;
    
    
    
    @Override
    public void robotInit() {
        RobotMap.init();
        pDPSub = new PDPSub();
        SmartDashboard.putData(pDPSub);
        controlSub = new ControlSub();
        oi = new OI();
        chooser.addDefault("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Auto mode", chooser);
        speedController1 = new VictorSP(kMotorPort0);
        speedController1.setInverted(true);
    	speedController2 = new VictorSP(kMotorPort1);
    	speedController2.setInverted(true);
    	speedController3 = new VictorSP(kMotorPort2);
    	speedController3.setInverted(false);
    	speedController4 = new VictorSP(kMotorPort3);
    	speedController4.setInverted(false);
    	//drive motors
    	
    	speedController5 = new VictorSP(kIntakePort4);
    	speedController5.setInverted(false);
    	speedController6 = new VictorSP(kIntakePort5);
    	speedController6.setInverted(false);
    	//intake motors
    	
    	speedController7 = new VictorSP(kArmPort6);
    	speedController7.setInverted(false);
    	speedController8 = new VictorSP(kSlidePort7);
    	speedController8.setInverted(false);
    	Xbox2 = new XboxController(1);  
        Xbox1 = new XboxController(0);
    }
   
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        if (autonomousCommand != null) autonomousCommand.start();
    }

    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    @Override
    public void teleopPeriodic() {
    	LeftX1 = Xbox1.getX(Hand.kLeft);
    	//LeftY1 = Xbox1.getY(Hand.kLeft);
    	//RightX1 = Xbox1.getX(Hand.kRight);
    	//RightY1 = Xbox1.getY(Hand.kRight);
    	TriggerL1 = Xbox1.getTriggerAxis(Hand.kLeft); 
    	TriggerR1 = Xbox1.getTriggerAxis(Hand.kRight);
    	LeftX2 = Xbox2.getX(Hand.kLeft);
    	//LeftY2 = Xbox2.getY(Hand.kLeft);
    	RightX2 = Xbox2.getX(Hand.kRight);
    	//RightY2 = Xbox2.getY(Hand.kRight);
    	Start2 = Xbox2.getStartButton();
    	TriggerL2 = Xbox2.getTriggerAxis(Hand.kLeft);
    	TriggerR2 = Xbox2.getTriggerAxis(Hand.kRight);
    	BumperL2 = Xbox2.getBumper(Hand.kLeft);
    	BumperR2 = Xbox2.getBumper(Hand.kRight);
    	
        Scheduler.getInstance().run();
        if(Start2 == true && manualarm == false){
        	//manualarm = true;
        }else if(Start2 == true && manualarm == true){
        	//manualarm = false;
        }//toggle value for switching between manual and auto arm movement
        
        if(LeftX2<.1 && LeftX2>-.1){
        	speedController5.set(0);
        }else if(LeftX2<.1 && LeftX2<=-.1){
        	speedController5.set(LeftX2*speedO1);
        }else if(LeftX2>=.1 && LeftX2>-.1){
        	speedController5.set(LeftX2*speedI1);
        }//intake motors
        
        if(RightX2<.1 && RightX2>-.1){
        	speedController6.set(0);
        }else if(RightX2<.1 && RightX2<=-.1){
        	speedController6.set(RightX2*speedO2);
        }else if(RightX2>=.1 && RightX2>-.1){
        	speedController6.set(RightX2*speedI2);
        }//intake motors
        
        if(manualarm == true && TriggerL2<.1 && TriggerR2<.1){
        	speedController7.set(0);
        }else if(manualarm == true && TriggerL2>=.1 && TriggerR2<.1){
        	speedController7.set(TriggerL2*speedAU);
        }else if(manualarm == true && TriggerL2<.1 && TriggerR2>=.1){
        	speedController7.set(TriggerR2*-speedAD);
        }//manual arm pivot movement if something happens
        
        
        if(manualarm == true && BumperR2 == false && BumperL2 == false){
        	speedController8.set(0);
        }else if(manualarm == true && BumperR2 == false && BumperL2 == true){
        	speedController8.set(speedSU);
        }else if(manualarm == true && BumperR2 == true && BumperL2 == false){
        	speedController8.set(-speedSD);
        }//manual linear slide movement if something happens
        
        if(LeftX1<= -.1 && TriggerR1>=.1 && LeftX1 != -1 && TriggerR1<= .1){
        	speedController1.set(TriggerR1*speedF1);
        	speedController2.set(TriggerR1*speedF2);
        	speedController3.set(TriggerR1*speedF3 + LeftX1*speedF3);
        	speedController4.set(TriggerR1*speedF4 + LeftX1*speedF4);
        	//if right trigger is pressed, right motors speeds up based on negative value of the left joystick X axis
        	
        }else if(LeftX1>= .1 && TriggerR1>=.1 && LeftX1 != 1){
        	speedController1.set(TriggerR1*speedF1 + LeftX1*speedF1);
        	speedController2.set(TriggerR1*speedF2 + LeftX1*speedF2);
        	speedController3.set(TriggerR1*speedF3);
        	speedController4.set(TriggerR1*speedF4);
        	//if right trigger is pressed, left motors speeds up based on positive value of the left joystick X axis
        	
        }else if(LeftX1<= .1 && LeftX1>= -.1 && TriggerL1<= .1){
        	speedController1.set(TriggerR1*speedF1);
        	speedController2.set(TriggerR1*speedF2);
        	speedController3.set(TriggerR1*speedF3);
        	speedController4.set(TriggerR1*speedF4);
        	//if right trigger is pressed, moves straight if left joystick X axis is between -.1 and .1
        	
        }else if(LeftX1== -1 && TriggerR1>=.1 && TriggerL1<= .1){
        	speedController1.set(TriggerR1*-speedR1);
        	speedController2.set(TriggerR1*-speedR2);
        	speedController3.set(TriggerR1*speedF3);
        	speedController4.set(TriggerR1*speedF4);
        	//if right trigger is pressed, and X axis of left joystick is held at 1,  spins to the left
        	
        }else if(LeftX1== 1 && TriggerR1>=.1 && TriggerL1<= .1){
        	speedController1.set(TriggerR1*speedF1);
        	speedController2.set(TriggerR1*speedF2);
        	speedController3.set(TriggerR1*-speedR3);
        	speedController4.set(TriggerR1*-speedR4);
        	//if right trigger is pressed, and X axis of left joystick is held at -1,  spins to the right
        	
        }else if(TriggerR1< .1 && TriggerL1< .1){
        	speedController1.set(0);	
        	speedController2.set(0);
        	speedController3.set(0);
        	speedController4.set(0);
        	//motors stop when triggers are not held down
        	
        }else if(LeftX1<= -.1 && TriggerL1>=.1 && LeftX1 != -1 && TriggerR1<= .1){
        	speedController1.set(TriggerL1*-speedR1 + LeftX1*-speedR1);
        	speedController2.set(TriggerL1*-speedR2 + LeftX1*-speedR2);
        	speedController3.set(TriggerL1*-speedR3);
        	speedController4.set(TriggerL1*-speedR3);
        	//if left trigger is pressed, left motors speeds up based on negative value of the left joystick X axis
        	
        }else if(LeftX1>= .1 && TriggerL1>=.1 && LeftX1 != 1 && TriggerR1<= .1){
        	speedController1.set(TriggerL1*-speedR1);
        	speedController2.set(TriggerL1*-speedR2);
        	speedController3.set(TriggerL1*-speedR3 + LeftX1*-speedR3);
        	speedController4.set(TriggerL1*-speedR4 + LeftX1*-speedR3);
        	//if left trigger is pressed, right motors speeds up based on positive value of the left joystick X axis
        	
        }else if(LeftX1<= .1 && Xbox1.getX(Hand.kLeft)>= -.1 && TriggerL1>= .1){
        	speedController1.set(TriggerL1*-speedR1);
        	speedController2.set(TriggerL1*-speedR2);
        	speedController3.set(TriggerL1*-speedR3);
        	speedController4.set(TriggerL1*-speedR4);
        	//if left trigger is pressed, moves straight if left joystick X axis is between -.1 and .1
        	
        }else if(LeftX1== -1 && TriggerL1>=.1 && TriggerR1<= .1){
        	speedController1.set(TriggerL1*-speedR1);
        	speedController2.set(TriggerL1*-speedR2);
        	speedController3.set(TriggerL1*speedF3);
        	speedController4.set(TriggerL1*speedF4);
        	//if left trigger is pressed, and X axis of left joystick is held at 1,  spins to the left
        	
        }else if(LeftX1== 1 && TriggerL1>=.1 && TriggerR1<= .1){
        	speedController1.set(TriggerL1*-speedR1);
        	speedController2.set(TriggerL1*-speedR2);
        	speedController3.set(TriggerL1*-speedR3);
        	speedController4.set(TriggerL1*-speedR4);
        	//if left trigger is pressed, and X axis of left joystick is held at -1,  spins to the right
    }
}}
