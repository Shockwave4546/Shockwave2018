// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4546.Shockwave2018;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc4546.Shockwave2018.commands.*;
import org.usfirst.frc4546.Shockwave2018.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    
    //Motor Value Variables
    double FrontLeftMotorValue;
	double FrontRightMotorValue;
	double BackLeftMotorValue;
	double BackRightMotorValue;
	
	//Motor Scaler Value Variables
	double FrontLeftScale;
	double FrontRightScale;
	double BackLeftScale;
	double BackRightScale;
	
	public static SendableChooser<ArmTest> armChooser;
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());
        
       

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        
    // Creates camera and video feed
     		/*new Thread(() -> {
     			UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
     			camera.setResolution(320, 240);
     			
     			CvSink cvsink = CameraServer.getInstance().getVideo();
     			CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 320, 240);
     			
     			Mat source = new Mat();
     			Mat output = new Mat();
     			
     			while(!Thread.interrupted()) {
     				cvsink.grabFrame(source);
     				Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
     				outputStream.putFrame(output);
     			}
     			
     		}).start();*/
        
  
		

		
        
        /* The Chooser */
	/*	armChooser = new SendableChooser<ArmTest>();
		armChooser.addDefault("Neutral", new ArmTest(0));
		armChooser.addObject("Low Goal", new ArmTest(1));
		armChooser.addObject("High Goal", new ArmTest(2));
		armChooser.addObject("Climb Position", new ArmTest(3));
		SmartDashboard.putData("Arm Chooser", armChooser);
	 */
    } 

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        
        //Inserts a blank textbox with true or false value (set to false first from Iterative function)
		SmartDashboard.putBoolean("ToggleSliderControl",true);
		
		//Inserts blank value in for the Left & Right Slider that can be modified to look like an slider.
		SmartDashboard.putNumber("FrontL_slider",0);
		SmartDashboard.putNumber("FrontR_slider",0);
		SmartDashboard.putNumber("BackL_slider",0);
		SmartDashboard.putNumber("BackR_slider",0);
		
		//Inserts Scaler Modifiers for Drive Motors on Shuffleboard (Number Input)
		SmartDashboard.putNumber("FrontL_Scale",0);
		SmartDashboard.putNumber("FrontR_Scale",0);
		SmartDashboard.putNumber("BackL_Scale",0);
		SmartDashboard.putNumber("BackR_Scale",0);
		
		//Intake Motor Direction Indicator is Inserted.
		SmartDashboard.putString("LeftIntakeDirection", "Neutral");
		SmartDashboard.putString("RightIntakeDirection", "Neutral");
		
		//Drive Direction Indicator is Inserted.
		SmartDashboard.putString("Main Direction", "Idle");
		SmartDashboard.putString("Turning", "None");
		
		
		
		
    }

    /**
     * This function is called periodically during operator control
     * @param armfind 
     * @param test 
     */
    
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
      //Toggle Button for Boolean on ShuffleBoard
		boolean ToggleSliderValue = SmartDashboard.getBoolean("ToggleSliderControl", true);
		if(ToggleSliderValue == true) {
		
				}else if(ToggleSliderValue == false) {
				
				}
		
		//Command armCommand = chooser.getSelected();
        //if (armCommand != null) armCommand.start();
        
		// Slider for the Left Motor and Right Motor (Gets value from slider)
		FrontLeftMotorValue = SmartDashboard.getNumber("FrontL_slider",0);
		FrontRightMotorValue = SmartDashboard.getNumber("FrontR_slider",0);
		BackLeftMotorValue = SmartDashboard.getNumber("BackL_slider",0);
		BackRightMotorValue = SmartDashboard.getNumber("BackR_slider",0);
		
		//Motor Scaler Slider Values are retrieved from Shuffleboard and set to variables respectively.
		FrontLeftScale = SmartDashboard.getNumber("FrontL_Scale",0.5);
		FrontRightScale = SmartDashboard.getNumber("FrontR_Scale",0.5);
		BackLeftScale = SmartDashboard.getNumber("BackL_Scale",0.5);
		BackRightScale = SmartDashboard.getNumber("BackR_Scale",0.5);
		
		//Final Motor Value Output Displayed on Shuffleboard
		SmartDashboard.putNumber("FrontLMotor",(FrontLeftMotorValue*FrontLeftScale));
		SmartDashboard.putNumber("FrontRMotor",(FrontRightMotorValue*FrontRightScale));
		SmartDashboard.putNumber("BackLMotor",(BackLeftMotorValue*BackLeftScale));
		SmartDashboard.putNumber("BackRMotor",(BackRightMotorValue*BackRightScale));

		
		
		
	/*	switch(Robot.armChooser.getSelected().getArmPosition()) {
		case "Neutral":
			System.out.println("0");
			break;
		case "Low Goal":
			System.out.println("1");
			break;
		case "High Goal":
			System.out.println("2");
			break;
		case "Climb Goal":
			System.out.println("3");
			break;
		}*/
		
		if(ToggleSliderValue == true) {
		//Gets value from slider in previous lines and sets the motor value.
			
		}
		
    }
    
}