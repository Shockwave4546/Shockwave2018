// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4546.Shockwave2018;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    
    private static final int kPDP = 0;
    private PowerDistributionPanel m_PDP;
    
    private static final int kMotorPort1 = 1;
	private SpeedController speedController1; 
	private static final int kMotorPort2 = 2; //victor spx
	private SpeedController speedController2;
	private static final int kMotorPort3 = 3;
	private SpeedController speedController3;
	private static final int kMotorPort4 = 4;
	private SpeedController speedController4;
	private static final int kMotorPort5 = 5;
	private SpeedController speedController5;
	private static final int kMotorPort6 = 6;
	private SpeedController speedController6; 
	private static final int kMotorPort7 = 7; //victor spx
	private SpeedController speedController7;
	private static final int kMotorPort8 = 8;
	private SpeedController speedController8;
	private static final int kMotorPort9 = 9;
	private SpeedController speedController9;  
	private AnalogInput ai; {
    	ai = new AnalogInput(0);
    	}
	DigitalInput limitswitch;
    
  
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
    	
    	m_PDP = new PowerDistributionPanel(kPDP);
    	SmartDashboard.putData("Voltage/Current", m_PDP);
    	SmartDashboard.putNumber("Power", m_PDP.getTotalPower());
    	SmartDashboard.putNumber("Total", m_PDP.getTotalPower() * Timer.getMatchTime());
    	
    	speedController1 = new Talon(kMotorPort1);
    	speedController2 = new Talon(kMotorPort2);
    	speedController3 = new Talon(kMotorPort3);
    	speedController4 = new Talon(kMotorPort4);
    	speedController5 = new Talon(kMotorPort5);
    	speedController6 = new Talon(kMotorPort6);
     	speedController7 = new Talon(kMotorPort7);
    	speedController8 = new Talon(kMotorPort8);
    	speedController9 = new Talon(kMotorPort9);
    	limitswitch = new DigitalInput(1);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
     

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
    

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    
        if(ai.getValue() > 3500){
			speedController3.set(1);
		}

        
        if(ai.getValue() > 3000 && ai.getValue() < 3450){
			speedController3.set(0.5);

		}
		
		if(ai.getValue() < 2950 && ai.getValue() > 1450){
			speedController3.set(0.1);
		
		}
		if(ai.getValue() < 1000){
			speedController3.set(0);
		
		}
		if(limitswitch.get() == true){
			
			
			
			
		}
    }

    public void ai() {
    	
    	AnalogInput.setGlobalSampleRate(62500);
		
		//Default value of samples per channel per second, causes all channels to sample at same rate
		
		AnalogInput exampleAnalog = new AnalogInput(0);
		int raw = exampleAnalog.getValue();
		double volts = exampleAnalog.getVoltage();
		int averageRaw = exampleAnalog.getAverageValue();
		double averageVolts = exampleAnalog.getAverageVoltage();
		
		/*
		 *-Raw value for bits without calibration
		 *-Volts value for bits after calibration
		*/
    
		SmartDashboard.putNumber("Analog Value", exampleAnalog.getValue());
		SmartDashboard.putNumber("Analog Voltage", exampleAnalog.getVoltage());
		
		//Just putting values on dashboard
		
		
    }
}
