// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4546.Shockwave2018;

import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    
    private static final int kPDP = 0;
    private PowerDistributionPanel m_PDP;
    
    private static final int kMotorPort1 = 1;
	private SpeedController speedController1; 
	private static final int kMotorPort2 = 2; //victor spx
	private SpeedController speedController2;
	private static final int kMotorPort3 = 3;
	private SpeedController speedController3;
	private static final int kMotorPort4 = 4;
	private SpeedController speedController4;
	private static final int kMotorPort5 = 5;
	private SpeedController speedController5;
	private static final int kMotorPort6 = 6;
	private SpeedController speedController6; 
	private static final int kMotorPort7 = 7; //victor spx
	private SpeedController speedController7;
	private static final int kMotorPort8 = 8;
	private SpeedController speedController8;
	private static final int kMotorPort9 = 9;
	private SpeedController speedController9;  
	private AnalogInput ai; {
    	ai = new AnalogInput(0);
    	}
	DigitalInput limitswitch;
    
  
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private static final int kMotorPort1 = 1;//Motor Controller 4
	private SpeedController FrontLeft;
	private double FrontLeftPos = .5;
	private double FrontLeftNeg = .5;
	
	private static final int kMotorPort3 = 3;//Motor Controller 6
	private SpeedController FrontRight;
	private double  FrontRightPos = .5;
	private double  FrontRightNeg = .5;
	
	private static final int kMotorPort4= 4;//Motor Controller 2
	private SpeedController BackLeft;
	private double  BackLeftPos = .5;
	private double  BackLeftNeg = .5;
	
	private static final int kMotorPort5 = 5;//Motor Controller 3
	private SpeedController BackRight;
	private double  BackRightPos = .5;
	private double  BackRightNeg = .5;
	
	private static final int kIntakePort2 = 2; //Motor Controller 10
	private SpeedController IntakeLeft;
	private double  IntakeLeftPos = .5;
	private double  IntakeLeftNeg = .5;
	
	private static final int kIntakePort7 = 7; //Motor Controller 7
	private SpeedController IntakeRight;
	private double  IntakeRightPos = .5;
	private double  IntakeRightNeg = .5;
	
	private static final int kArmPort6 = 6;//Motor Controller 3
	private SpeedController ArmMotor;
	private double  ArmPos = .5;
	private double  ArmNeg = .5;
	
	private static final int kSlidePort8 = 8;//Motor Controller 1
	private SpeedController SlideMotor;
	private double  SlidePos = .5;
	private double  SlideNeg = .5;
	
	//private static final int kMotorPort9 = 9;
	//private SpeedController speedController9;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
    	
    	m_PDP = new PowerDistributionPanel(kPDP);
    	SmartDashboard.putData("Voltage/Current", m_PDP);
    	SmartDashboard.putNumber("Power", m_PDP.getTotalPower());
    	SmartDashboard.putNumber("Total", m_PDP.getTotalPower() * Timer.getMatchTime());
    	
    	speedController1 = new Talon(kMotorPort1);
    	speedController2 = new Talon(kMotorPort2);
    	speedController3 = new Talon(kMotorPort3);
    	speedController4 = new Talon(kMotorPort4);
    	speedController5 = new Talon(kMotorPort5);
    	speedController6 = new Talon(kMotorPort6);
     	speedController7 = new Talon(kMotorPort7);
    	speedController8 = new Talon(kMotorPort8);
    	speedController9 = new Talon(kMotorPort9);
    	limitswitch = new DigitalInput(1);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
     

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
    

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    	SmartDashboard.putData("Auto mode", chooser);
        new Thread(() -> {
            UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
            camera.setResolution(640, 480);
            
            CvSink cvSink = CameraServer.getInstance().getVideo();
            CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640, 480);
            
            Mat source = new Mat();
            Mat output = new Mat();
            
            while(!Thread.interrupted()) {
                cvSink.grabFrame(source);
                Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
                outputStream.putFrame(output);
            }
        }).start();
    	FrontLeft = new VictorSP(kMotorPort1);
    	FrontLeft.setInverted(false);
    	
    	FrontRight = new VictorSP(kMotorPort3);
    	FrontRight.setInverted(false);
    	
    	BackLeft = new VictorSP(kMotorPort4);
    	BackLeft.setInverted(false);
    	
    	BackRight = new VictorSP(kMotorPort5);
    	BackRight.setInverted(false);
    	
    	IntakeLeft = new VictorSP(kIntakePort2);//Victor SPX
    	IntakeLeft.setInverted(false);
    	
    	IntakeRight = new VictorSP(kIntakePort7);//Victor SPX
    	IntakeRight.setInverted(false);
    	
     	ArmMotor = new VictorSP(kArmPort6);
     	ArmMotor.setInverted(false);
     	
    	SlideMotor = new VictorSP(kSlidePort8);
    	SlideMotor.setInverted(false);
    	
    	//speedController9 = new VictorSP(kMotorPort9);
        

        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    
        if(ai.getValue() > 3500){
			speedController3.set(1);
		}

        
        if(ai.getValue() > 3000 && ai.getValue() < 3450){
			speedController3.set(0.5);

		}
		
		if(ai.getValue() < 2950 && ai.getValue() > 1450){
			speedController3.set(0.1);
		
		}
		if(ai.getValue() < 1000){
			speedController3.set(0);
		
		}
		if(limitswitch.get() == true){
			
			
			
			
		}
    }

    public void ai() {
    	
    	AnalogInput.setGlobalSampleRate(62500);
		
		//Default value of samples per channel per second, causes all channels to sample at same rate
		
		AnalogInput exampleAnalog = new AnalogInput(0);
		int raw = exampleAnalog.getValue();
		double volts = exampleAnalog.getVoltage();
		int averageRaw = exampleAnalog.getAverageValue();
		double averageVolts = exampleAnalog.getAverageVoltage();
		
		/*
		 *-Raw value for bits without calibration
		 *-Volts value for bits after calibration
		*/
    
		SmartDashboard.putNumber("Analog Value", exampleAnalog.getValue());
		SmartDashboard.putNumber("Analog Voltage", exampleAnalog.getVoltage());
		
		//Just putting values on dashboard
		
		
    }
}
